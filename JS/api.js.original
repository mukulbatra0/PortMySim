/**
 * API Client for PortMySim
 * Handles all API requests to the backend server
 */

// Base API URL - change this to your actual backend URL in production
const DEFAULT_PORT = 5000;
let API_BASE_URL = `http://localhost:${DEFAULT_PORT}/api`;
let API_PORT_DETECTED = false;

// Config for port detection
const PORT_DETECTION_CONFIG = {
  // Only try the most likely ports
  portsToTry: [5000], // Focus on the one port we know is used
  timeoutMs: 2000,   // Shorter timeout
  retryCount: 1,     // Only try once per port
  retryDelayMs: 0    // No delay between retries
};

// Auth token management
const TOKEN_KEY = 'portmysim_auth_token';
const USER_KEY = 'portmysim_user';

// Get the stored auth token
const getToken = () => localStorage.getItem(TOKEN_KEY);

// Get the stored user data
const getUser = () => {
  const userData = localStorage.getItem(USER_KEY);
  return userData ? JSON.parse(userData) : null;
};

// Store auth token and user data
const setAuth = (token, user) => {
  localStorage.setItem(TOKEN_KEY, token);
  localStorage.setItem(USER_KEY, JSON.stringify(user));
};

// Clear auth data on logout
const clearAuth = () => {
  localStorage.removeItem(TOKEN_KEY);
  localStorage.removeItem(USER_KEY);
};

// Check if user is authenticated
const isAuthenticated = () => !!getToken();

// API request helper with authentication
const apiRequest = async (endpoint, options = {}) => {
  const url = `${API_BASE_URL}${endpoint}`;
  console.log('API request to:', url);
  
  // Default headers
  const headers = {
    'Content-Type': 'application/json',
    ...options.headers
  };

  // Add auth token if available
  const token = getToken();
  if (token) {
    headers['Authorization'] = `Bearer ${token}`;
  }

  try {
    const response = await fetch(url, {
      ...options,
      headers
    });

    // First check if response is OK
    if (!response.ok) {
      // Get response as text first for debugging
      const errorText = await response.text();
      console.error(`API Error (${response.status}):`, errorText);
      
      // Try to parse as JSON if possible
      let errorData;
      try {
        errorData = JSON.parse(errorText);
        return { success: false, message: errorData.message || 'API request failed' };
      } catch (e) {
        // If not valid JSON, throw error with status code
        throw new Error(`API request failed with status ${response.status}`);
      }
    }

    // Now try to parse successful response as JSON
    const data = await response.json();

    return data;
  } catch (error) {
    console.error('API request error:', error);
    throw error;
  }
};

// Auth API functions
const authAPI = {
  // Login user
  login: async (email, password) => {
    const data = await apiRequest('/auth/login', {
      method: 'POST',
      body: JSON.stringify({ email, password })
    });
    
    if (data.success && data.token) {
      setAuth(data.token, data.user);
    }
    
    return data;
  },
  
  // Register user
  register: async (userData) => {
    const data = await apiRequest('/auth/register', {
      method: 'POST',
      body: JSON.stringify(userData)
    });
    
    if (data.success && data.token) {
      setAuth(data.token, data.user);
    }
    
    return data;
  },
  
  // Get current user profile
  getProfile: async () => {
    return await apiRequest('/auth/me');
  },
  
  // Logout user
  logout: () => {
    clearAuth();
    // Redirect to home page after logout
    window.location.href = '/HTML/index.html';
  },
  
  // Request password reset
  forgotPassword: async (email) => {
    console.log('Forgot password request for:', email);
    
    // Ensure we have the correct port
    await detectApiPort();
    
    try {
      // Log the full request URL for debugging
      const url = `${API_BASE_URL}/auth/forgot-password`;
      console.log('Full request URL:', url);
      
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify({ email })
      });
      
      const responseText = await response.text();
      console.log('Raw response:', responseText);
      
      // Check if response looks like HTML
      if (responseText.trim().startsWith('<!DOCTYPE') || responseText.trim().startsWith('<html')) {
        console.error('Server returned HTML instead of JSON. The auth API route may not be configured correctly.');
        
        // Try a fallback with a different port
        const fallbackPort = API_BASE_URL.includes('5001') ? '5000' : '5001';
        const fallbackUrl = `http://localhost:${fallbackPort}/api/auth/forgot-password`;
        console.log('Trying fallback URL:', fallbackUrl);
        
        const fallbackResponse = await fetch(fallbackUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify({ email })
        });
        
        if (fallbackResponse.ok) {
          const fallbackData = await fallbackResponse.json();
          console.log('Fallback response successful:', fallbackData);
          return fallbackData;
        }
        
        return {
          success: false,
          message: 'Password reset system is currently unavailable. Please try again later or contact support.'
        };
      }
      
      // Try to parse as JSON
      let data;
      try {
        data = JSON.parse(responseText);
      } catch (err) {
        console.error('Error parsing response as JSON:', err);
        throw new Error('Invalid response format from server');
      }
      
      if (!response.ok) {
        console.error('Error response:', data);
        return {
          success: false,
          message: data.message || 'Failed to send password reset email.'
        };
      }
      
      return data;
    } catch (error) {
      console.error('Forgot password error:', error);
      return {
        success: false,
        message: 'Failed to send password reset email. Please try again later.'
      };
    }
  },
  
  // Reset password with token
  resetPassword: async (resetToken, password) => {
    console.log('Attempting to reset password with token:', resetToken);
    
    // Ensure we have the correct port
    await detectApiPort();
    
    try {
      // Log the full request URL for debugging
      const url = `${API_BASE_URL}/auth/reset-password/${resetToken}`;
      console.log('Full request URL:', url);
      
      const response = await fetch(url, {
      method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
      body: JSON.stringify({ password })
    });
      
      const responseText = await response.text();
      console.log('Raw response:', responseText);
      
      // Check if response looks like HTML
      if (responseText.trim().startsWith('<!DOCTYPE') || responseText.trim().startsWith('<html')) {
        console.error('Server returned HTML instead of JSON. The auth API route may not be configured correctly.');
        
        // Try a fallback with a different port
        const fallbackPort = API_BASE_URL.includes('5001') ? '5000' : '5001';
        const fallbackUrl = `http://localhost:${fallbackPort}/api/auth/reset-password/${resetToken}`;
        console.log('Trying fallback URL:', fallbackUrl);
        
        const fallbackResponse = await fetch(fallbackUrl, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify({ password })
        });
        
        if (fallbackResponse.ok) {
          const fallbackData = await fallbackResponse.json();
          console.log('Fallback response successful:', fallbackData);
          return fallbackData;
        }
        
        return {
          success: false,
          message: 'Password reset system is currently unavailable. Please try again later or contact support.'
        };
      }
      
      // Try to parse as JSON
      let data;
      try {
        data = JSON.parse(responseText);
      } catch (err) {
        console.error('Error parsing response as JSON:', err);
        throw new Error('Invalid response format from server');
      }
      
      if (!response.ok) {
        console.error('Error response:', data);
        return {
          success: false,
          message: data.message || 'Failed to reset password. The link may have expired or is invalid.'
        };
      }
      
      return data;
    } catch (error) {
      console.error('Reset password error:', error);
      return {
        success: false,
        message: 'Failed to reset password. The link may have expired or is invalid.'
      };
    }
  }
};

// Export the API client
window.PortMySimAPI = {
  auth: authAPI,
  isAuthenticated,
  getUser,
  getApiBaseUrl: () => API_BASE_URL
};

/**
 * API utilities for fetching data from the backend
 */

/**
 * Fetch all plans with optional filtering
 * @param {Object} filters - Query parameters for filtering
 * @returns {Promise} - Resolves to plans data
 */
async function fetchPlans(filters = {}) {
  try {
    // Build query string from filters
    const queryParams = new URLSearchParams();
    Object.entries(filters).forEach(([key, value]) => {
      if (value) {
        queryParams.append(key, value);
      }
    });
    
    const queryString = queryParams.toString() ? `?${queryParams.toString()}` : '';
    const response = await fetch(`${API_BASE_URL}/plans${queryString}`);
    
    if (!response.ok) {
      throw new Error(`Error fetching plans: ${response.statusText}`);
    }
    
    return await response.json();
  } catch (error) {
    console.error('API Error:', error);
    throw error;
  }
}

/**
 * Fetch plans by operator
 * @param {string} operator - Operator name (jio, airtel, vi, bsnl)
 * @returns {Promise} - Resolves to plans data for the operator
 */
async function fetchPlansByOperator(operator) {
  try {
    console.log(`Fetching plans for operator: ${operator}`);
    const url = `${API_BASE_URL}/operators/${operator}/plans`;
    console.log(`Request URL: ${url}`);
    
    // Add timeout to the fetch request
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 second timeout
    
    const response = await fetch(url, {
      signal: controller.signal
    });
    
    clearTimeout(timeoutId);
    
    if (!response.ok) {
      console.error(`Error status: ${response.status}`);
      
      // For 500 or 404 errors, fall back to local processing
      if (response.status === 500 || response.status === 404) {
        console.warn(`Server error occurred, falling back to local ${operator} plans data`);
        return getLocalOperatorPlans(operator);
      }
      
      throw new Error(`Error fetching operator plans: ${response.statusText}`);
    }
    
    const data = await response.json();
    console.log('Plans data received:', data);
    return data;
  } catch (error) {
    console.error('API Error:', error);
    console.warn(`Using local fallback data for ${operator} plans`);
    return getLocalOperatorPlans(operator);
  }
}

/**
 * Get local plans by operator when API fails
 * @param {string} operator - Operator name
 * @returns {Array} - Array of plans for the operator
 */
function getLocalOperatorPlans(operator) {
  // Local plans data by operator
  const localPlans = {
    'jio': [
      { 
        name: 'Jio Basic Plan', 
        price: 179, 
        data: '1GB/day',
        data_value: 30,
        validity: 28,
        validity_category: 'monthly',
        has_5g: true,
        voice_calls: 'Unlimited',
        sms: '100/day',
        subscriptions: ['JioTV', 'JioCinema'],
        network_coverage: 93,
        data_speed: 35,
        plan_type: 'prepaid',
        data_category: 'low',
        price_category: 'budget',
        operator: 'jio',
        image: '../images/jio.jpeg'
      },
      { 
        name: 'Jio Standard Plan', 
        price: 299, 
        data: '2GB/day',
        data_value: 60,
        validity: 28,
        validity_category: 'monthly',
        has_5g: true,
        voice_calls: 'Unlimited',
        sms: '100/day',
        subscriptions: ['JioTV', 'JioCinema', 'JioCloud'],
        network_coverage: 96,
        data_speed: 60,
        plan_type: 'prepaid',
        data_category: 'medium',
        price_category: 'mid',
        operator: 'jio',
        image: '../images/jio.jpeg'
      },
      { 
        name: 'Jio Premium Plan', 
        price: 549, 
        data: '2GB/day',
        data_value: 60,
        validity: 84,
        validity_category: 'quarterly',
        has_5g: true,
        voice_calls: 'Unlimited',
        sms: 'Unlimited',
        subscriptions: ['JioTV', 'JioCinema', 'JioCloud', 'Disney+ Hotstar'],
        network_coverage: 98,
        data_speed: 80,
        plan_type: 'prepaid',
        data_category: 'medium',
        price_category: 'premium',
        operator: 'jio',
        image: '../images/jio.jpeg'
      }
    ],
    'airtel': [
      { 
        name: 'Airtel Basic Plan', 
        price: 199, 
        data: '1.5GB/day',
        data_value: 45,
        validity: 28,
        validity_category: 'monthly',
        has_5g: true,
        voice_calls: 'Unlimited',
        sms: '100/day',
        subscriptions: ['Amazon Prime Subscription', 'Wynk Music'],
        network_coverage: 95,
        data_speed: 40,
        plan_type: 'prepaid',
        data_category: 'medium',
        price_category: 'budget',
        operator: 'airtel',
        image: '../images/airtel.png'
      },
      { 
        name: 'Airtel Standard Plan', 
        price: 349, 
        data: '2.5GB/day',
        data_value: 75,
        validity: 28,
        validity_category: 'monthly',
        has_5g: true,
        voice_calls: 'Unlimited',
        sms: '100/day',
        subscriptions: ['Amazon Prime Subscription', 'Wynk Music', 'Airtel Xstream Premium'],
        network_coverage: 97,
        data_speed: 70,
        plan_type: 'prepaid',
        data_category: 'high',
        price_category: 'mid',
        operator: 'airtel',
        image: '../images/airtel.png'
      },
      { 
        name: 'Airtel Premium Plan', 
        price: 599, 
        data: '3GB/day',
        data_value: 90,
        validity: 84,
        validity_category: 'quarterly',
        has_5g: true,
        voice_calls: 'Unlimited',
        sms: 'Unlimited',
        subscriptions: ['Amazon Prime Subscription', 'Disney+ Hotstar', 'Wynk Music', 'Airtel Xstream Premium'],
        network_coverage: 99,
        data_speed: 100,
        plan_type: 'prepaid',
        data_category: 'high',
        price_category: 'premium',
        operator: 'airtel',
        image: '../images/airtel.png'
      }
    ],
    'vi': [
      { 
        name: 'Vi Basic Plan', 
        price: 189, 
        data: '1.5GB/day',
        data_value: 45,
        validity: 28,
        validity_category: 'monthly',
        has_5g: false,
        voice_calls: 'Unlimited',
        sms: '100/day',
        subscriptions: ['Vi Movies & TV'],
        network_coverage: 85,
        data_speed: 30,
        plan_type: 'prepaid',
        data_category: 'medium',
        price_category: 'budget',
        operator: 'vi',
        image: '../images/vi.png'
      },
      { 
        name: 'Vi Standard Plan', 
        price: 319, 
        data: '2GB/day',
        data_value: 60,
        validity: 28,
        validity_category: 'monthly',
        has_5g: false,
        voice_calls: 'Unlimited',
        sms: '100/day',
        subscriptions: ['Vi Movies & TV'],
        network_coverage: 90,
        data_speed: 45,
        plan_type: 'prepaid',
        data_category: 'medium',
        price_category: 'mid',
        operator: 'vi',
        image: '../images/vi.png'
      },
      { 
        name: 'Vi Premium Plan', 
        price: 499, 
        data: '3GB/day',
        data_value: 90,
        validity: 70,
        validity_category: 'quarterly',
        has_5g: true,
        voice_calls: 'Unlimited',
        sms: 'Unlimited',
        subscriptions: ['Vi Movies & TV', 'Mobile Insurance'],
        network_coverage: 92,
        data_speed: 60,
        plan_type: 'prepaid',
        data_category: 'high',
        price_category: 'premium',
        operator: 'vi',
        image: '../images/vi.png'
      }
    ],
    'bsnl': [
      { 
        name: 'BSNL Basic Plan', 
        price: 149, 
        data: '1GB/day',
        data_value: 30,
        validity: 28,
        validity_category: 'monthly',
        has_5g: false,
        voice_calls: 'Unlimited',
        sms: '100/day',
        subscriptions: [],
        network_coverage: 85,
        data_speed: 20,
        plan_type: 'prepaid',
        data_category: 'low',
        price_category: 'budget',
        operator: 'bsnl',
        image: '../images/bsnl.png'
      },
      { 
        name: 'BSNL Standard Plan', 
        price: 279, 
        data: '2GB/day',
        data_value: 60,
        validity: 84,
        validity_category: 'quarterly',
        has_5g: false,
        voice_calls: 'Unlimited',
        sms: '100/day',
        subscriptions: [],
        network_coverage: 85,
        data_speed: 20,
        plan_type: 'prepaid',
        data_category: 'medium',
        price_category: 'mid',
        operator: 'bsnl',
        image: '../images/bsnl.png'
      },
      { 
        name: 'BSNL Premium Plan', 
        price: 399, 
        data: '3GB/day',
        data_value: 90,
        validity: 90,
        validity_category: 'quarterly',
        has_5g: false,
        voice_calls: 'Unlimited',
        sms: 'Unlimited',
        subscriptions: [],
        network_coverage: 85,
        data_speed: 20,
        plan_type: 'prepaid',
        data_category: 'high',
        price_category: 'premium',
        operator: 'bsnl',
        image: '../images/bsnl.png'
      }
    ]
  };
  
  // Return plans for the requested operator or empty array if not found
  const operatorPlans = localPlans[operator.toLowerCase()] || [];
  console.log(`Generated ${operatorPlans.length} local plans for ${operator}`);
  
  return operatorPlans;
}

/**
 * Compare multiple plans by IDs
 * @param {Array} planIds - Array of plan IDs to compare
 * @returns {Promise} - Resolves to comparison data
 */
async function comparePlans(planIds) {
  try {
    if (!planIds || !Array.isArray(planIds) || planIds.length === 0) {
      throw new Error('No plan IDs provided for comparison');
    }
    
    console.log(`Comparing ${planIds.length} plans:`, planIds);
    
    // Add timeout to the fetch request
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 second timeout
    
    const queryParams = new URLSearchParams();
    planIds.forEach(id => queryParams.append('ids', id));
    
    const response = await fetch(`${API_BASE_URL}/plans/compare?${queryParams.toString()}`, {
      signal: controller.signal
    });
    
    clearTimeout(timeoutId);
    
    if (!response.ok) {
      console.error(`Error status: ${response.status}`);
      
      // For 500 errors, fall back to local processing
      if (response.status === 500) {
        console.warn('Server error occurred, falling back to local comparison');
        return processPlanComparisonLocally(planIds);
      }
      
      throw new Error(`Error comparing plans: ${response.statusText}`);
    }
    
    const data = await response.json();
    console.log('Comparison data received:', data);
    return data;
  } catch (error) {
    console.error('API Error:', error);
    console.warn('Using local fallback for plan comparison');
    return processPlanComparisonLocally(planIds);
  }
}

/**
 * Local fallback processing for plan comparisons when the server returns an error
 * @param {Array} planIds - Array of plan IDs to compare
 * @returns {Object} - Comparison data object
 */
function processPlanComparisonLocally(planIds) {
  console.log('Processing plan comparison locally with IDs:', planIds);
  
  // Create sample fallback data
  // This is the same sample data used in plans.js
  const samplePlans = [
    {
      operator: 'jio',
      name: 'Jio Premium',
      price: 399,
      data: '3GB/day',
      data_value: 90,
      validity: 84,
      validity_category: 'quarterly',
      has_5g: true,
      voice_calls: 'Unlimited',
      sms: '100/day',
      subscriptions: ['JioTV', 'JioCinema'],
      network_coverage: 98,
      data_speed: 50,
      image: '../images/jio.jpeg',
      recommendation: 'Best Value'
    },
    {
      operator: 'airtel',
      name: 'Airtel Smart',
      price: 349,
      data: '2.5GB/day',
      data_value: 75,
      validity: 56,
      validity_category: 'quarterly',
      has_5g: true,
      voice_calls: 'Unlimited',
      sms: '100/day',
      subscriptions: ['Amazon Prime'],
      network_coverage: 99,
      data_speed: 100,
      image: '../images/airtel.png',
      recommendation: 'Best Data'
    },
    {
      operator: 'vi',
      name: 'Vi Value',
      price: 329,
      data: '2GB/day',
      data_value: 60,
      validity: 70,
      validity_category: 'quarterly',
      has_5g: false,
      voice_calls: 'Unlimited',
      sms: '100/day',
      subscriptions: ['Vi Movies & TV'],
      network_coverage: 92,
      data_speed: 45,
      image: '../images/vi.png',
      recommendation: 'Budget Choice'
    }
  ];
  
  // Filter plans based on IDs
  const plansToCompare = samplePlans.filter(plan => planIds.includes(plan.name));
  
  // Use the first two plans if no matches
  const finalPlans = plansToCompare.length >= 2 ? plansToCompare : samplePlans.slice(0, 2);
  
  // Calculate value scores
  const valueScores = finalPlans.map(plan => {
    return { score: (Math.random() * 3 + 7).toFixed(1) }; // Random score between 7-10
  });
  
  // Create the response object
  const comparisonData = {
    plans: finalPlans,
    valueScores,
    features: {
      daily_data: Array(finalPlans.length).fill(false),
      validity: Array(finalPlans.length).fill(false),
      price: Array(finalPlans.length).fill(false),
      coverage: Array(finalPlans.length).fill(false),
      speed: Array(finalPlans.length).fill(false)
    }
  };
  
  // Mark some features as best
  if (finalPlans.length > 0) {
    // Data
    const maxDataIndex = finalPlans.reduce((maxIdx, plan, idx, arr) => 
      (plan.data_value > arr[maxIdx].data_value) ? idx : maxIdx, 0);
    comparisonData.features.daily_data[maxDataIndex] = true;
    
    // Validity
    const maxValidityIndex = finalPlans.reduce((maxIdx, plan, idx, arr) => 
      (plan.validity > arr[maxIdx].validity) ? idx : maxIdx, 0);
    comparisonData.features.validity[maxValidityIndex] = true;
    
    // Generate summary
    const bestValuePlan = finalPlans[maxDataIndex];
    const cheapestPlan = finalPlans.reduce((min, p) => p.price < min.price ? p : min, finalPlans[0]);
    
    comparisonData.summary = `Based on our analysis, ${bestValuePlan.name} offers the best value for money at ₹${bestValuePlan.price}. If budget is your primary concern, ${cheapestPlan.name} is the most affordable option at ₹${cheapestPlan.price}.`;
  }
  
  console.log('Local comparison data generated:', comparisonData);
  return comparisonData;
}

/**
 * Fetch similar plans 
 * @param {Object} params - Search parameters
 * @returns {Promise} - Resolves to similar plans data
 */
async function fetchSimilarPlans({ planId, priceRange, operator }) {
  try {
    const queryParams = new URLSearchParams();
    if (planId) queryParams.append('planId', planId);
    if (priceRange) queryParams.append('priceRange', priceRange);
    if (operator) queryParams.append('operator', operator);
    
    const response = await fetch(`${API_BASE_URL}/plans/similar?${queryParams.toString()}`);
    
    if (!response.ok) {
      throw new Error(`Error fetching similar plans: ${response.statusText}`);
    }
    
    return await response.json();
  } catch (error) {
    console.error('API Error:', error);
    throw error;
  }
}

/**
 * Fetch recommended plans
 * @returns {Promise} - Resolves to recommended plans data
 */
async function fetchRecommendedPlans() {
  try {
    const response = await fetch(`${API_BASE_URL}/plans/recommended`);
    
    if (!response.ok) {
      // For errors, fall back to local recommendations
      if (response.status === 500 || response.status === 404) {
        console.warn('Server error occurred, falling back to local recommendations');
        return getLocalRecommendedPlans();
      }
      
      throw new Error(`Error fetching recommended plans: ${response.statusText}`);
    }
    
    return await response.json();
  } catch (error) {
    console.error('API Error:', error);
    return getLocalRecommendedPlans();
  }
}

/**
 * Get local recommended plans when API fails
 * @returns {Array} - Array of recommended plans
 */
function getLocalRecommendedPlans() {
  // Create sample recommended plans data
  const recommendedPlans = [
    {
      name: 'Jio Standard Plan',
      operator: 'jio',
      price: 299,
      validity: 28,
      data: '2GB/day',
      data_value: 60,
      voice_calls: 'Unlimited',
      sms: '100/day',
      has_5g: true,
      subscriptions: ['JioTV', 'JioCinema', 'JioCloud'],
      network_coverage: 96,
      data_speed: 60,
      extra_benefits: ['Unlimited 5G Data'],
      plan_type: 'prepaid',
      data_category: 'medium',
      price_category: 'mid',
      validity_category: 'monthly',
      image: '../images/jio.jpeg',
      recommendation: 'Best Value'
    },
    {
      name: 'Airtel Standard Plan',
      operator: 'airtel',
      price: 349,
      validity: 28,
      data: '2.5GB/day',
      data_value: 75,
      voice_calls: 'Unlimited',
      sms: '100/day',
      has_5g: true,
      subscriptions: ['Amazon Prime Subscription', 'Wynk Music', 'Airtel Xstream Premium'],
      network_coverage: 97,
      data_speed: 70,
      extra_benefits: ['Free Hellotunes'],
      plan_type: 'prepaid',
      data_category: 'high',
      price_category: 'mid',
      validity_category: 'monthly',
      image: '../images/airtel.png',
      recommendation: 'Best Data'
    },
    {
      name: 'Jio Basic Plan',
      operator: 'jio',
      price: 179,
      validity: 28,
      data: '1GB/day',
      data_value: 30,
      voice_calls: 'Unlimited',
      sms: '100/day',
      has_5g: true,
      subscriptions: ['JioTV', 'JioCinema'],
      network_coverage: 93,
      data_speed: 35,
      extra_benefits: [],
      plan_type: 'prepaid',
      data_category: 'low',
      price_category: 'budget',
      validity_category: 'monthly',
      image: '../images/jio.jpeg',
      recommendation: 'Budget Choice'
    }
  ];
  
  console.log(`Generated ${recommendedPlans.length} local recommended plans`);
  return recommendedPlans;
}

/**
 * Fetch network coverage data
 * @param {Object} params - Query parameters
 * @returns {Promise} - Resolves to network coverage data
 */
async function fetchNetworkCoverage(params = {}) {
  try {
    const queryParams = new URLSearchParams();
    Object.entries(params).forEach(([key, value]) => {
      if (value) {
        queryParams.append(key, value);
      }
    });
    
    const queryString = queryParams.toString() ? `?${queryParams.toString()}` : '';
    const response = await fetch(`${API_BASE_URL}/network-coverage${queryString}`);
    
    if (!response.ok) {
      throw new Error(`Error fetching network coverage: ${response.statusText}`);
    }
    
    return await response.json();
  } catch (error) {
    console.error('API Error:', error);
    throw error;
  }
}

/**
 * Compare networks by various parameters
 * @param {Object} params - Query parameters
 * @returns {Promise} - Resolves to network comparison data
 */
async function compareNetworks(params = {}) {
  try {
    const queryParams = new URLSearchParams();
    Object.entries(params).forEach(([key, value]) => {
      if (value) {
        queryParams.append(key, value);
      }
    });
    
    const queryString = queryParams.toString() ? `?${queryParams.toString()}` : '';
    const response = await fetch(`${API_BASE_URL}/network-comparison${queryString}`);
    
    if (!response.ok) {
      throw new Error(`Error comparing networks: ${response.statusText}`);
    }
    
    return await response.json();
  } catch (error) {
    console.error('API Error:', error);
    throw error;
  }
}

/**
 * Get the best network for a location
 * @param {Object} params - Query parameters
 * @returns {Promise} - Resolves to best network data
 */
async function getBestNetwork(params = {}) {
  try {
    const queryParams = new URLSearchParams();
    Object.entries(params).forEach(([key, value]) => {
      if (value) {
        queryParams.append(key, value);
      }
    });
    
    const queryString = queryParams.toString() ? `?${queryParams.toString()}` : '';
    const response = await fetch(`${API_BASE_URL}/best-network${queryString}`);
    
    if (!response.ok) {
      throw new Error(`Error fetching best network: ${response.statusText}`);
    }
    
    return await response.json();
  } catch (error) {
    console.error('API Error:', error);
    throw error;
  }
}

/**
 * Get all locations with network coverage
 * @returns {Promise} - Resolves to locations data
 */
async function getLocationsWithCoverage() {
  try {
    const response = await fetch(`${API_BASE_URL}/locations-with-coverage`);
    
    if (!response.ok) {
      throw new Error(`Error fetching locations: ${response.statusText}`);
    }
    
    return await response.json();
  } catch (error) {
    console.error('API Error:', error);
    throw error;
  }
}

// Add all functions to the global API object for non-module usage
window.PortMySimAPI = {
  ...window.PortMySimAPI,
  fetchPlans,
  fetchPlansByOperator,
  comparePlans,
  fetchSimilarPlans,
  fetchRecommendedPlans,
  fetchNetworkCoverage,
  compareNetworks,
  getBestNetwork,
  getLocationsWithCoverage
};

// Support ES module exports if in a module context
if (typeof exports !== 'undefined') {
  exports.fetchPlans = fetchPlans;
  exports.fetchPlansByOperator = fetchPlansByOperator;
  exports.comparePlans = comparePlans;
  exports.fetchSimilarPlans = fetchSimilarPlans;
  exports.fetchRecommendedPlans = fetchRecommendedPlans;
  exports.fetchNetworkCoverage = fetchNetworkCoverage;
  exports.compareNetworks = compareNetworks;
  exports.getBestNetwork = getBestNetwork;
  exports.getLocationsWithCoverage = getLocationsWithCoverage;
}

// Also support ES module export syntax directly
if (typeof exports === 'undefined' && typeof window !== 'undefined') {
  // Create a module object with all exports
  const apiModule = {
    fetchPlans,
    fetchPlansByOperator,
    comparePlans,
    fetchSimilarPlans,
    fetchRecommendedPlans,
    fetchNetworkCoverage,
    compareNetworks,
    getBestNetwork,
    getLocationsWithCoverage
  };
  
  // Export it for ES modules
  if (typeof window !== 'undefined') {
    window.__API_MODULE__ = apiModule;
  }
} 

// Add a function to check server connectivity
async function testServerConnection() {
  try {
    console.log('Testing server connection to:', API_BASE_URL);
    
    const response = await fetch(`${API_BASE_URL}/auth/ping`, {
      method: 'GET',
      headers: { 'Content-Type': 'application/json' }
    });
    
    if (response.ok) {
      console.log('Server connection successful');
      return true;
    }
    
    console.warn('Server connection failed with status:', response.status);
    return false;
  } catch (error) {
    console.error('Server connectivity test failed:', error);
    return false;
  }
}

// Test the connection when the script loads
testServerConnection();

// Disable port detection entirely - just use port 5000
// Using DEFAULT_PORT defined at the top of the file
async function detectApiPort() {
  // Always use DEFAULT_PORT (5000)
  API_BASE_URL = `http://localhost:${DEFAULT_PORT}/api`;
  
  try {
    // Just try the main API endpoint once with a short timeout
    const pingUrl = `${API_BASE_URL}/auth/ping`;
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 1500);
    
    const response = await fetch(pingUrl, {
      method: 'GET',
      headers: { 'Accept': 'application/json' },
      signal: controller.signal
    });
    
    clearTimeout(timeoutId);
    
    if (response.ok) {
      const data = await response.json();
      if (data && data.success) {
        console.log(`Connected to API server on port ${DEFAULT_PORT}`);
        API_PORT_DETECTED = true;
        
        // Hide any existing error message
        const errorDiv = document.querySelector('.api-connection-error');
        if (errorDiv) {
          errorDiv.style.display = 'none';
        }
      }
    }
  } catch (error) {
    // Silent failure, just note it in console
    console.log(`API server not detected. Some features may be limited.`);
  }
  
  return API_BASE_URL;
}

// Only show error message on API-dependent pages
function showConnectionError() {
  // Only show error UI for pages that require API
  const isAPIRequiredPage = document.querySelector('[data-requires-api="true"]') !== null;
  
  if (isAPIRequiredPage && !API_PORT_DETECTED) {
    if (document.querySelector('.api-connection-error') === null) {
      const errorDiv = document.createElement('div');
      errorDiv.className = 'api-connection-error';
      errorDiv.style.cssText = 'position: fixed; top: 20px; right: 20px; background-color: #f44336; color: white; padding: 15px; border-radius: 5px; z-index: 9999; box-shadow: 0 2px 10px rgba(0,0,0,0.2);';
      errorDiv.innerHTML = `
        <div style="font-weight: bold; margin-bottom: 5px;">API Connection Error</div>
        <div>Could not connect to the backend server. Please make sure the server is running on port ${DEFAULT_PORT}.</div>
        <div style="margin-top: 10px; font-size: 0.9em;">
          <p>Try these steps:</p>
          <ol style="margin-left: 20px; margin-top: 5px;">
            <li>Run start_server.bat to start the server</li>
            <li>Check if MongoDB is installed and running</li>
            <li>Make sure port ${DEFAULT_PORT} is not in use by another application</li>
          </ol>
        </div>
        <button id="retry-connection" style="margin-top: 10px; padding: 5px 10px; background: white; color: black; border: none; border-radius: 3px; cursor: pointer;">Retry Connection</button>
        <button id="dismiss-error" style="margin-top: 10px; margin-left: 10px; padding: 5px 10px; background: rgba(255,255,255,0.3); color: white; border: 1px solid white; border-radius: 3px; cursor: pointer;">Dismiss</button>
      `;
      document.body.appendChild(errorDiv);
      
      // Add event listeners
      document.getElementById('retry-connection').addEventListener('click', async () => {
        errorDiv.innerHTML = '<div style="text-align: center;">Retrying connection...</div>';
        await detectApiPort();
        if (API_PORT_DETECTED) {
          errorDiv.remove();
        } else {
          showConnectionError(); // Recreate the error message
        }
      });
      
      document.getElementById('dismiss-error').addEventListener('click', () => {
        errorDiv.remove();
      });
    }
  }
} 
